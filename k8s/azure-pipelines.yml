trigger:
  - azure/test # TODO change to master later
pr:
  - azure/test # TODO change to master later

variables:
  serviceName: skojjt

stages:
  - stage: ${{ format('build_pipleine_{0}', variables.serviceName) }}
    jobs:
      - template: templates/build-service.job.yaml
        parameters:
          serviceName: ${{ variables.serviceName }}
          subPath: ./
          stepsTemplate: build.yaml
  - stage: ${{ format('beta_deploy_{0}', variables.serviceName) }}
    displayName: Deploy to Beta
    jobs:
      - deployment: ${{ format('beta_deploy_{0}', variables.serviceName) }}
        displayName: ${{ format('Beta Deploy {0}', variables.serviceName) }}
        environment: skojjt-staging
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: ${{ format('{0}-deploy', variables.serviceName) }}
                - script: echo Fake beta script
  - stage: ${{ format('tag_{0}', variables.serviceName) }}
    displayName: Github Tag version
    jobs:
      - deployment: ${{ format('tag_{0}', variables.serviceName) }}
        displayName: ${{ format('Tag {0} version', variables.serviceName) }}
        environment: skojjt
        strategy:
          runOnce:
            deploy:
              steps:
                - download: none
                - task: GitHubRelease@0
                  inputs:
                    gitHubConnection: github
                    repositoryName: '$(Build.Repository.Name)'
                    action: create
                    target: '$(Build.SourceVersion)'
                    tagSource: 'auto'
  - stage: ${{ format('live_deploy_{0}', variables.serviceName) }}
    displayName: Deploy to Production
    jobs:
      - deployment: ${{ format('deploy_{0}', variables.serviceName) }}
        displayName: ${{ format('Deploy {0}', variables.serviceName) }}
        environment: skojjt
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: ${{ format('{0}-deploy', variables.serviceName) }}
                - task: Kubernetes@1
                  displayName: kubectl apply -n skojjt -f aks.yaml
                  inputs:
                    namespace: skojjt
                    command: apply
                    arguments: -f skojjt-deploy/aks.yaml
                    connectionType: Azure Resource Manager
                    azureSubscriptionEndpoint: 'acr'
                    azureResourceGroup: 'web'
                    kubernetesCluster: 'webservices'
